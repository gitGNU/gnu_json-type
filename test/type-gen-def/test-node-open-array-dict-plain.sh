#!/bin/bash

# Copyright (C) 2016  Stefan Vargyas
# 
# This file is part of Json-Type.
# 
# Json-Type is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Json-Type is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Json-Type.  If not, see <http://www.gnu.org/licenses/>.

#
# File generated by a command like:
# $ json-gentest -C type-gen-def:node-open-array-dict-plain
#

[[ "$1" =~ ^-u[0-9]+$ ]] &&
u="${1:2}" ||
u=""

diff -u$u -L node-open-array-dict-plain.old <(echo \
'$ set -o pipefail
$ json() { LD_LIBRARY_PATH=../lib ../src/json -Td "$@"|sed -r '\''s/^#/\\#/;/^\s*\/\//d;/^\s*$/d'\''; }
$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":null}}]}}'\''
\#define EQ  cell.eq
\#define VAL cell.val
static const struct json_type_node_t __0 = {
    .type = json_type_plain_node_type,
    .node.plain = {
        .type = json_type_plain_null_type,
    }
};
static const struct json_type_dict_trie_node_t __1 = {
    .sym = '\''\0'\'',
    .VAL = 0
};
static const struct json_type_dict_trie_node_t __2 = {
    .sym = '\''a'\'',
    .EQ = &__1
};
static const struct json_type_dict_trie_node_t __3 = {
    .sym = '\''a'\'',
    .EQ = &__2
};
static const struct json_type_dict_trie_node_t __4 = {
    .sym = '\''f'\'',
    .EQ = &__3
};
static const struct json_type_dict_trie_t __5 = {
    .root = &__4
};
static const struct json_type_dict_node_arg_t __6[] = {
    {
        .name = (const uchar_t*) "faa",
        .type = &__0
    }
};
static const struct json_type_node_t __7 = {
    .type = json_type_dict_node_type,
    .attr.dict = &__5,
    .node.dict = {
        .args = __6,
        .size = 1
    }
};
static const struct json_type_node_t __8 = {
    .type = json_type_array_node_type,
    .node.array = {
        .type = json_type_open_array_node_type,
        .val.open.arg = &__7
    }
};
static const struct json_type_def_t MODULE_TYPE_DEF = {
    .type = json_type_def_node_type,
    .val.node = &__8
};
$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":false}}]}}'\''
\#define EQ  cell.eq
\#define VAL cell.val
static const struct json_type_node_t __0 = {
    .type = json_type_plain_node_type,
    .node.plain = {
        .type = json_type_plain_boolean_type,
        .val.boolean = false
    }
};
static const struct json_type_dict_trie_node_t __1 = {
    .sym = '\''\0'\'',
    .VAL = 0
};
static const struct json_type_dict_trie_node_t __2 = {
    .sym = '\''a'\'',
    .EQ = &__1
};
static const struct json_type_dict_trie_node_t __3 = {
    .sym = '\''a'\'',
    .EQ = &__2
};
static const struct json_type_dict_trie_node_t __4 = {
    .sym = '\''f'\'',
    .EQ = &__3
};
static const struct json_type_dict_trie_t __5 = {
    .root = &__4
};
static const struct json_type_dict_node_arg_t __6[] = {
    {
        .name = (const uchar_t*) "faa",
        .type = &__0
    }
};
static const struct json_type_node_t __7 = {
    .type = json_type_dict_node_type,
    .attr.dict = &__5,
    .node.dict = {
        .args = __6,
        .size = 1
    }
};
static const struct json_type_node_t __8 = {
    .type = json_type_array_node_type,
    .node.array = {
        .type = json_type_open_array_node_type,
        .val.open.arg = &__7
    }
};
static const struct json_type_def_t MODULE_TYPE_DEF = {
    .type = json_type_def_node_type,
    .val.node = &__8
};
$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":true}}]}}'\''
\#define EQ  cell.eq
\#define VAL cell.val
static const struct json_type_node_t __0 = {
    .type = json_type_plain_node_type,
    .node.plain = {
        .type = json_type_plain_boolean_type,
        .val.boolean = true
    }
};
static const struct json_type_dict_trie_node_t __1 = {
    .sym = '\''\0'\'',
    .VAL = 0
};
static const struct json_type_dict_trie_node_t __2 = {
    .sym = '\''a'\'',
    .EQ = &__1
};
static const struct json_type_dict_trie_node_t __3 = {
    .sym = '\''a'\'',
    .EQ = &__2
};
static const struct json_type_dict_trie_node_t __4 = {
    .sym = '\''f'\'',
    .EQ = &__3
};
static const struct json_type_dict_trie_t __5 = {
    .root = &__4
};
static const struct json_type_dict_node_arg_t __6[] = {
    {
        .name = (const uchar_t*) "faa",
        .type = &__0
    }
};
static const struct json_type_node_t __7 = {
    .type = json_type_dict_node_type,
    .attr.dict = &__5,
    .node.dict = {
        .args = __6,
        .size = 1
    }
};
static const struct json_type_node_t __8 = {
    .type = json_type_array_node_type,
    .node.array = {
        .type = json_type_open_array_node_type,
        .val.open.arg = &__7
    }
};
static const struct json_type_def_t MODULE_TYPE_DEF = {
    .type = json_type_def_node_type,
    .val.node = &__8
};
$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":123}}]}}'\''
\#define EQ  cell.eq
\#define VAL cell.val
static const struct json_type_node_t __0 = {
    .type = json_type_plain_node_type,
    .node.plain = {
        .type = json_type_plain_number_type,
        .val.number = (const uchar_t*) "123"
    }
};
static const struct json_type_dict_trie_node_t __1 = {
    .sym = '\''\0'\'',
    .VAL = 0
};
static const struct json_type_dict_trie_node_t __2 = {
    .sym = '\''a'\'',
    .EQ = &__1
};
static const struct json_type_dict_trie_node_t __3 = {
    .sym = '\''a'\'',
    .EQ = &__2
};
static const struct json_type_dict_trie_node_t __4 = {
    .sym = '\''f'\'',
    .EQ = &__3
};
static const struct json_type_dict_trie_t __5 = {
    .root = &__4
};
static const struct json_type_dict_node_arg_t __6[] = {
    {
        .name = (const uchar_t*) "faa",
        .type = &__0
    }
};
static const struct json_type_node_t __7 = {
    .type = json_type_dict_node_type,
    .attr.dict = &__5,
    .node.dict = {
        .args = __6,
        .size = 1
    }
};
static const struct json_type_node_t __8 = {
    .type = json_type_array_node_type,
    .node.array = {
        .type = json_type_open_array_node_type,
        .val.open.arg = &__7
    }
};
static const struct json_type_def_t MODULE_TYPE_DEF = {
    .type = json_type_def_node_type,
    .val.node = &__8
};
$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":"foo"}}]}}'\''
\#define EQ  cell.eq
\#define VAL cell.val
static const struct json_type_node_t __0 = {
    .type = json_type_plain_node_type,
    .node.plain = {
        .type = json_type_plain_string_type,
        .val.string = (const uchar_t*) "foo"
    }
};
static const struct json_type_dict_trie_node_t __1 = {
    .sym = '\''\0'\'',
    .VAL = 0
};
static const struct json_type_dict_trie_node_t __2 = {
    .sym = '\''a'\'',
    .EQ = &__1
};
static const struct json_type_dict_trie_node_t __3 = {
    .sym = '\''a'\'',
    .EQ = &__2
};
static const struct json_type_dict_trie_node_t __4 = {
    .sym = '\''f'\'',
    .EQ = &__3
};
static const struct json_type_dict_trie_t __5 = {
    .root = &__4
};
static const struct json_type_dict_node_arg_t __6[] = {
    {
        .name = (const uchar_t*) "faa",
        .type = &__0
    }
};
static const struct json_type_node_t __7 = {
    .type = json_type_dict_node_type,
    .attr.dict = &__5,
    .node.dict = {
        .args = __6,
        .size = 1
    }
};
static const struct json_type_node_t __8 = {
    .type = json_type_array_node_type,
    .node.array = {
        .type = json_type_open_array_node_type,
        .val.open.arg = &__7
    }
};
static const struct json_type_def_t MODULE_TYPE_DEF = {
    .type = json_type_def_node_type,
    .val.node = &__8
};'
) -L node-open-array-dict-plain.new <(
echo '$ set -o pipefail'
set -o pipefail 2>&1 ||
echo 'command failed: set -o pipefail'

echo '$ json() { LD_LIBRARY_PATH=../lib ../src/json -Td "$@"|sed -r '\''s/^#/\\#/;/^\s*\/\//d;/^\s*$/d'\''; }'
json() { LD_LIBRARY_PATH=../lib ../src/json -Td "$@"|sed -r 's/^#/\\#/;/^\s*\/\//d;/^\s*$/d'; } 2>&1 ||
echo 'command failed: json() { LD_LIBRARY_PATH=../lib ../src/json -Td "$@"|sed -r '\''s/^#/\\#/;/^\s*\/\//d;/^\s*$/d'\''; }'

echo '$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":null}}]}}'\'''
json <<< '{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":null}}]}}' 2>&1 ||
echo 'command failed: json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":null}}]}}'\'''

echo '$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":false}}]}}'\'''
json <<< '{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":false}}]}}' 2>&1 ||
echo 'command failed: json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":false}}]}}'\'''

echo '$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":true}}]}}'\'''
json <<< '{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":true}}]}}' 2>&1 ||
echo 'command failed: json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":true}}]}}'\'''

echo '$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":123}}]}}'\'''
json <<< '{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":123}}]}}' 2>&1 ||
echo 'command failed: json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":123}}]}}'\'''

echo '$ json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":"foo"}}]}}'\'''
json <<< '{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":"foo"}}]}}' 2>&1 ||
echo 'command failed: json <<< '\''{"type":"array","args":{"type":"dict","args":[{"name":"faa","type":{"plain":"foo"}}]}}'\'''
)

